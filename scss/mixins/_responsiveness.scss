////
///     This file holds utility mixins for responsive design
////

///
/// Writes a responsive class for given breakpoint, width and width type.
/// If the passed width is a percentage greater than $no-float-width the
/// float property is also set to none.
///
/// @param {string} $breakpoint - The breakpoint name width classes will be written for.
/// @param {int|string} $width - The width value will have. If it is a number, is divided by 100.
/// @param {string} $width-type - The CSS property the classes will contain, one of width, min-width or max-width.
///
@mixin single-value-responsive-width($breakpoint, $width, $width-type: null) {
    $selector: _join(list-purge($width-type width $breakpoint $width), '-');
    $width-prop: _join(list-purge($width-type width), '-');
    $is-perc: type-of($width) == 'number';

    .#{$selector} {
        #{$width-prop}: if($is-perc, percentage($width / 100), $width);

        @if $is-perc and $width >= $no-float-with {
            float: none;
        }
    }
}

///
/// Writes responsive width classes for every percentage from 5% to 100%, with
/// a step of 5; furthermore, it adds some other percentages and auto. Every
/// class is for a single property, either width, min-width or max-width.
///
/// @param {string} $breakpoint - The breakpoint name width classes will be written for.
/// @param {string} $width-type - The CSS property the classes will contain, one of width, min-width or max-width.
///
@mixin single-type-responsive-width($breakpoint, $width-type: null) {
    @for $width from 1 through 20 {
        @include single-value-responsive-width($breakpoint, $width * 5, $width-type);
    }

    @each $width in (33, 66) {
        @include single-value-responsive-width($breakpoint, $width, $width-type);
    }

    @include single-value-responsive-width($breakpoint, auto, $width-type);
}

///
/// Writes all width, min-width and max-width classes
/// for a given breakpoint.
///
/// @param {string} $breakpoint - The breakpoint name width classes will be written for.
///
@mixin responsive-width($breakpoint) {
    /* width */

    @include single-type-responsive-width($breakpoint, null);

    /* min-width */

    @include single-type-responsive-width($breakpoint, min);

    /* max-width */

    @include single-type-responsive-width($breakpoint, max);
}

///
/// Writes visible responsive classes.
/// In a desktop-first approach, this means that
/// elements should be hidden from the immediately
/// larger breakpoint upwards. This in turn leads
/// any breakpoint media query to have classes
/// related to the immediately smaller breakpoint.
///
/// @param {string} $breakpoint - The current breakpoint.
///
@mixin responsive-visible($breakpoint) {
    $breakpoints: map-keys($grid-breakpoints);

    $this-index: index($breakpoints, $breakpoint);

    @if $this-index > 1 {

        // Immediately smaller breakpoint
        $smaller: nth($breakpoints, $this-index - 1);

        /*
            #{$smaller} responsive visible class:
            desktop-first approach means that elements
            should be hidden from the immediately larger
            breakpoint upwards, that leads to #{$smaller}
            being in #{$breakpoint} media query.
        */
        .visible-#{$smaller} {
            display: none;
        }
    }
}
